@page "/Create"
@inject HttpClient httpClient

<EditForm Model="vehiculos" OnValidSubmit="Guardar">
	<DataAnnotationsValidator/>
	<div class="card">
		<div class="card-header">
			<h2>Registro Veh&iacute;culo</h2>
		</div>

		<div class="card-body">
			<div class="row">
				<label>Veh&iacute;culoId</label>
				<div class="col-auto">

					<InputNumber @bind-Value="vehiculos.VehiculoId" class="form-control"></InputNumber>
					<ValidationMessage For="(() => vehiculos.VehiculoId)"></ValidationMessage>
				</div>
			</div>

			<div class="row">
				<label>Descripci&oacute;n</label>
				<div class="col-auto">
					<InputText @bind-Value="vehiculos.Descripcion" class="form-control"></InputText>
					<ValidationMessage For="(() => vehiculos.Descripcion)"></ValidationMessage>

				</div>
			</div>

			<div class="row">
				<label>Fecha</label>
				<div class="col-auto">
					<InputDate @bind-Value="vehiculos.Fecha" class="form-control"></InputDate>
					<ValidationMessage For="(() => vehiculos.Fecha)"></ValidationMessage>

				</div>
			</div>


			<div class="row">
				<label>Costo</label>
				<div class="col-auto">
					<InputNumber @bind-Value="vehiculos.Costo" class="form-control"></InputNumber>
					<ValidationMessage For="(() => vehiculos.Costo)"></ValidationMessage>

				</div>
			</div>

			<div class="row">
				<label>Gasto</label>
				<div class="col-auto">
					<InputNumber @bind-Value="vehiculos.Gasto" class="form-control" readonly></InputNumber>
					

				</div>
			</div>

			

		</div>
	</div>

	<div class="card">
		<div class="card-header">
			<h2>Veh&iacute;culo Detalle</h2>
		</div>

		<div class="card-body">
			<div class="row">
				<label>Id</label>
				<div class="col-auto">
					<InputNumber @bind-Value="vehiculosDetalle.Id"></InputNumber>

				</div>
				
			</div>

			<div class="row">
				<label>AccesorioId</label>
				<div class="col-auto">
					
					<InputSelect @bind-Value=@vehiculosDetalle.AccesorioId class="form-control" >

						<option value="">Seleccione el AccesorioId</option>
						
						@foreach (var accesorio in listaAcessorio)
						{
							<option value="@accesorio.AccesoriosId">@accesorio.Descripcion</option>
						}
					</InputSelect>

				</div>
				
				
			</div>
			<div class="row">

				<label>Valor</label>
				<div class="col-auto">
					<InputNumber @bind-Value="vehiculosDetalle.Valor"></InputNumber>
				</div>
				
				<p class="text-danger">@mensaje</p>
			</div>
		</div>
		
		<hr clas="border-bottom" />

		<div>
			<table class="table table-bordered">
				<thead>
					<tr>
						<th>AccesorioId</th>
						<th>Valor</th>
						<th></th>
					</tr>
				</thead>
				<tbody>

					@foreach (var detalle in vehiculos.VehiculosDetalles)
					{
						
						<tr>
							<td>@detalle.AccesorioId</td>
							<td>@detalle.Valor</td>
							<td>
								<button type="button" class="btn btn-danger bi bi-trash" @onclick=@(() => Eliminar(detalle))></button>
							</td>
						</tr>
							
						
					}
				</tbody>
			</table>

		</div>
		<div class="card-footer">
			<button><a href="/" class="btn btn-group bi bi-arrow-left">Atr&aacute;s</a></button>
			<button type="submit" class="btn btn-success bi bi-floppy">Guardar</button>
			<button type="button" class="btn btn-success bi bi-save2" @onclick="AddDetalle">AgregarDetalle</button>
		</div>
	</div>
</EditForm>
@code {
	public Vehiculos vehiculos { get; set; } = new Vehiculos();
	public Accesorios accesorios { get; set; } = new Accesorios();

	public VehiculosDetalle vehiculosDetalle = new VehiculosDetalle();

	public List<Vehiculos> listaVehiculo = new List<Vehiculos>();
	public List<Accesorios> listaAcessorio = new List<Accesorios>();

	public string mensaje = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		vehiculos.Fecha = DateTime.Now;

		listaAcessorio = await httpClient.GetFromJsonAsync<List<Accesorios>>("api/Accesorios");
		listaVehiculo = await httpClient.GetFromJsonAsync<List<Vehiculos>>("api/Vehiculos");


	}


	public async Task Guardar()
	{
		var response = await httpClient.PostAsJsonAsync("api/Vehiculos", vehiculos);

		if (!response.IsSuccessStatusCode)
		{
			return;

		}

		var vehiculoDevuelto = await response.Content.ReadFromJsonAsync<Vehiculos>();

		if (vehiculoDevuelto is not null)
		{
			vehiculos = vehiculoDevuelto;
			nuevo(); 
			StateHasChanged();
		}
	}

	public void nuevo()
	{
		vehiculos = new Vehiculos();
		vehiculosDetalle = new VehiculosDetalle();
	}

	public async Task AddDetalle()
	{
		vehiculosDetalle.VehiculoId = vehiculos.VehiculoId;
		if(validar() == false){ return; }
		vehiculos.VehiculosDetalles.Add(vehiculosDetalle);
		vehiculos.Gasto += vehiculosDetalle.Valor;
		vehiculosDetalle = new VehiculosDetalle();
		StateHasChanged(); 
	}
	public bool validar()
	{
		if (vehiculosDetalle.AccesorioId == 0)
		{
			mensaje = "debes seleccionar un accesorio id valido";
			return false;
		}
		else if (vehiculosDetalle.Valor <= 0)
		{
			mensaje = "El valor debe ser mayor a 0";
			return false;
		}
		else if (vehiculos.VehiculosDetalles.Any(a => a.AccesorioId == vehiculosDetalle.AccesorioId))
		{
			mensaje = "Ya existe un Accesorio Id";
			return false;
		}
		mensaje = string.Empty;
		return true;
	}

	public async Task Eliminar(VehiculosDetalle vehiculosDetalles)
	{
		vehiculosDetalle = vehiculosDetalles;
		vehiculos.Gasto -= vehiculosDetalle.Valor;
		vehiculos.VehiculosDetalles.Remove(vehiculosDetalles);
		StateHasChanged();
	}
}
